if (vis)
{
    transparentSample = false;
    vec4 x = sampleVolume(wpos);

    if(x.r > -0.5 || lastSample) { // we need to process this sample only if it is from a volume that actually exists at this sample point
        #if USE_PRINTF
        if(gl_GlobalInvocationID.xy == debug_pixel) {
            debugPrintfEXT("Step: %d, color of sample: (%f, %f, %f, %f) at position: (%f, %f, %f, %f)", i, x.rgba, wpos.xyzw);
        }
        #endif

        float newAlpha = x.a;
        vec3 newColor = x.rgb;

        vec4 ndcPos = pv * wpos;
        ndcPos *= 1. / ndcPos.w;

        float ndc_step = ndcPos.z;

        if(newAlpha <= minOpacity) {
            transparentSample = true;
        }

        if(supersegmentIsOpen) {

            //        imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 1, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), vec4(0));
            //        imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 2, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), vec4(0));
            //        imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), vec4(0));
            //        supersegmentNum++;

            //        float segLen = step - supSegStartPoint;
            //        float segLen = ndc_step - supSegStartPoint;
            float segLen = length(wprev - supseg_start_w);
            vec4 supersegmentAdjusted;
            supersegmentAdjusted.rgb = curV.rgb / curV.a;
            supersegmentAdjusted.a = adjustOpacity(curV.a, 1.0/segLen);
            //        supersegmentAdjusted.a = curV.a;
            //        supersegmentAdjusted = x;
            float diff = diffPremultiplied(supersegmentAdjusted, x);

            bool newSupSeg = false;
            if(diff >= newSupSegThresh) {
                newSupSeg = true;
                #if USE_PRINTF
                if(gl_GlobalInvocationID.xy == debug_pixel) {
                    debugPrintfEXT("Termination criteria reached for %dth time, color of supseg was: (%f, %f, %f, %f)", num_terminations, supersegmentAdjusted.rgba);
                }
                #endif
                num_terminations++;
            }

            if(lastSample || (newSupSeg && !lastSupersegment)) { //closing a supersegment
                supersegmentIsOpen = false;
                //            supSegEndPoint = step;

                #if WORLD_ABS
                vec3 diff = wpos.xyz - ro_world.xyz;
                if(!(abs(rd_world.x) < 0.05)) {
                    supSegEndPoint = diff.x / (rd_world.x);
                } else if (!(abs(rd_world.y) < 0.05)) {
                    supSegEndPoint = diff.y / (rd_world.y);
                } else {
                    supSegEndPoint = diff.z / (rd_world.z);
                }
                    #else
                supSegEndPoint = ndc_step;
                #endif

                #if USE_PRINTF
                if(gl_GlobalInvocationID.xy == debug_pixel) {
                    debugPrintfEXT("Closing supseg: %d", supersegmentNum);
                }
                #endif

                vec4 encodedDepthStart;
                vec4 encodedDepthEnd;
                encodedDepthStart = EncodeFloatRGBA(supSegStartPoint);
                encodedDepthEnd = EncodeFloatRGBA(supSegEndPoint);
                //            encodedDepths = encode(supSegStartPoint, supSegEndPoint);
                #if SEPARATE_DEPTH
                imageStore(OutputSubVDIDepth, ivec3(2 * supersegmentNum, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), vec4(supSegStartPoint, 0, 0, 0));
                imageStore(OutputSubVDIDepth, ivec3(2 * supersegmentNum + 1, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), vec4(supSegEndPoint, 0, 0, 0));
                imageStore(OutputSubVDIColor, ivec3(supersegmentNum, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), supersegmentAdjusted);

                #else
                imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 1, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), encodedDepthStart);
                imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 2, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), encodedDepthEnd);
                imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), supersegmentAdjusted);
                #endif
                supersegmentNum++;
            }
        }

        if( (!lastSample) && (!supersegmentIsOpen) && (!transparentSample) ) { //opening a supersegment
            supersegmentIsOpen = true;
            //        supSegStartPoint = step;
            #if WORLD_ABS
            vec3 diff = wpos.xyz - ro_world.xyz;
            if(!(abs(rd_world.x) < 0.05)) {
                supSegStartPoint = diff.x / (rd_world.x);
            } else if (!(abs(rd_world.y) < 0.05)) {
                supSegStartPoint = diff.y / (rd_world.y);
            } else {
                supSegStartPoint = diff.z / (rd_world.z);
            }
            #else
            supSegStartPoint = ndc_step;
            #endif
            supseg_start_w = wprev;
            curV = vec4( 0 );
        }

        float w = adjustOpacity(newAlpha, length(wpos - wprev));

        //    float w = newAlpha;
        curV.rgb = curV.rgb + (1 - curV.a) * newColor * w;
        curV.a = curV.a + (1 - curV.a) * w;

        v.rgb = v.rgb + (1.0f - v.a) * newColor * w; //TODO Remove
        v.a = v.a + (1.0f - v.a) * w;

        //    if(v.a >= 1.0f) {
        //        break;
        //    }

    }
}
