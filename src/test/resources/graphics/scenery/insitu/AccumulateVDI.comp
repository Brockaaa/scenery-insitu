if (vis)
{
    vec4 x = sampleVolume(wpos);
    float newAlpha = x.a;
    vec3 newColor = x.rgb;

    if(newAlpha < minOpacity) {
        transparentSample = true;
    }

    if(supersegmentIsOpen) {
        float segLen = step - supSegStartPoint;
        vec4 supersegmentAdjusted;
        supersegmentAdjusted.rgb = curV.rgb / curV.a;
//        supersegmentAdjusted.a = adjustOpacity(curV.a, 1.0/segLen);
        supersegmentAdjusted.a = curV.a;
//        supersegmentAdjusted = x;
        float diff = diffPremultiplied(supersegmentAdjusted, x);

        bool newSupSeg = false;
        if(diff >= newSupSegThresh) {
            newSupSeg = true;
        }

        if(lastSample || ((newSupSeg || transparentSample) && !lastSupersegment)) {
            supersegmentIsOpen = false;
            supSegEndPoint = step;
            vec4 encodedDepthStart;
            vec4 encodedDepthEnd;
            encodedDepthStart = EncodeFloatRGBA(supSegStartPoint);
            encodedDepthEnd = EncodeFloatRGBA(supSegEndPoint);
//            encodedDepths = encode(supSegStartPoint, supSegEndPoint);
            imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 1, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), encodedDepthStart);
            imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum + 2, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), encodedDepthEnd);
            imageStore(OutputSubVDIColor, ivec3(3 * supersegmentNum, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x), supersegmentAdjusted);
            supersegmentNum++;
        }
    }

    if( (!lastSample) && (!supersegmentIsOpen) && (!transparentSample) ) {
        supersegmentIsOpen = true;
        supSegStartPoint = step;
        curV = vec4( 0 );
    }

//    float w = adjustOpacity(newAlpha, nw + step * fwnw);
    float w = newAlpha;
    curV.rgb = curV.rgb + (1 - curV.a) * newColor * w;
    curV.a = curV.a + (1 - curV.a) * w;

    v.rgb = v.rgb + (1.0f - v.a) * newColor * newAlpha; //TODO Remove
    v.a = v.a + (1.0f - v.a) * newAlpha;

//    if(v.a >= 1.0f) {
//        break;
//    }
}
