#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (set = 0, binding = 0, rgba8) uniform readonly image2D InputColorVDI;
layout (set = 1, binding = 0, rgba8) uniform image2D OutputViewport;
layout (set = 2, binding = 0, rgba8) uniform readonly image2D InputDepthVDI;

vec2 decode(vec4 c){
    vec2 v = vec2(0.);

    int ir = int(c.r*255.);
    int ig = int(c.g*255.);
    int irg = ir*256 + ig;
    v.x = float(irg) / 256.;

    int ib = int(c.b*255.);
    int ia = int(c.a*255.);
    int iba = ib*256 + ia;
    v.y = float(iba) / 256.;

    v -= 128.;
    return v;
}

const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
const vec4 bitDec = 1./bitEnc;
float DecodeFloatRGBA (vec4 v) {
    return dot(v, bitDec);
}

void main() {
    ivec2 imageCoords  = imageSize(OutputViewport);
    int imgWidth = imageCoords.x;
    int imgHeight = imageCoords.y;

    int numSupersegments = imageSize(InputColorVDI).r;
    vec4 v = vec4(0);

    for(int i = 0; i < numSupersegments; i++) {
        vec4 x = imageLoad(InputColorVDI, ivec2(i, imgHeight * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y)).rgba;
        vec3 newColor = x.rgb;
        float newAlpha = x.a;

        if(i<(numSupersegments-1)) {

            vec4 d = imageLoad(InputDepthVDI, ivec2(i*2, imgHeight * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y)); //Start point of this supersegment
            vec4 dNext = imageLoad(InputDepthVDI, ivec2(i*2+2, imgHeight * gl_GlobalInvocationID.x + gl_GlobalInvocationID.y)); //Start point of next supersegment
            float depthHere = DecodeFloatRGBA(d);

            if(i!=0 && depthHere == 0.0) {
                break;
            }

            float depthNext = DecodeFloatRGBA(dNext);
            if((depthHere < depthNext) || (depthHere > 0. && depthNext == 0.)) {
                //            if(true) {
                v.rgb = v.rgb + (1.0f - v.a) * newColor * newAlpha;
                v.a = v.a + (1.0f - v.a) * newAlpha;
            } else {
                v = vec4(0); //If supersegments not in ascending order, penalize
            }
        } else {
            v.rgb = v.rgb + (1.0f - v.a) * newColor * newAlpha;
            v.a = v.a + (1.0f - v.a) * newAlpha;
        }
    }

    imageStore(OutputViewport, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), v);
}
